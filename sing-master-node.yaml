- name: Seting up Single Master Node Cluster including all Prerequisites.
  hosts: k8s_cluster
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: Check if buildah package is installed
      command: rpm -qa buildah
      register: buildah_check
      ignore_errors: true

    - name: Remove buildah package if found
      ansible.builtin.yum:
        name: buildah
        state: absent
      when: buildah_check.rc == 0

    - name: Check if podman-catatonit package is installed
      command: rpm -qa podman-catatonit
      register: podman_catatonit_check
      ignore_errors: true

    - name: Remove podman-catatonit package if found
      ansible.builtin.yum:
        name: podman-catatonit
        state: absent
      when: podman_catatonit_check.rc == 0

    - name: Install dependencies
      yum:
        name: yum-utils
        state: present

    # - name: Update all the Repositories and packages
    #   command: dnf update -y

    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - vim
        - curl
        - wget
        - zip
        - tar
        - net-tools
        - telnet
        - make
        - nc

    - name: Stop and Disable Firewalld
      ansible.builtin.shell: |
        systemctl disable firewalld
        systemctl stop firewalld

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Disable IPtables
      command: iptables -F

    - name: Disable SELinux
      command: setenforce 0

    - name: Load kernel modules overlay and br_netfilter
      ansible.builtin.modprobe:
        name: "{{ item }}"
      with_items:
        - overlay
        - br_netfilter

    - name: Set iptables policy for FORWARD chain
      ansible.builtin.shell: iptables -P FORWARD ACCEPT

    - name: Configure kernel parameters
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
          vm.swappiness = 0
          vm.overcommit_memory = 1
          vm.panic_on_oom = 0
          fs.inotify.max_user_watches = 89100

    - name: Apply sysctl settings
      ansible.builtin.shell: sysctl --system

    - name: Add Docker repository
      command: wget https://download.docker.com/linux/centos/docker-ce.repo

    - name: Removing Docker
      become: yes
      yum:
        name: docker
        state: absent

    - name: Install Docker packages
      yum:
        name: docker-ce-{{ docker_version }}
        state: present

    - name: Start & enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Add YUM repository for Kubernetes
      ansible.builtin.copy:
        src: kubernetes.repo
        dest: /etc/yum.repos.d/kubernetes.repo

    # - name: Removing  Kubernetes
    #   yum:
    #     name: "{{ item }}
    #     state: absent
    #     update_cache: yes
    #   loop:
    #     - kubelet
    #     - kubeadm
    #     - kubectl

    - name: Install Kubernetes
      yum:
        name: "{{ item }}-{{ k8s }}"
        state: present
        update_cache: yes
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Stopping the kubelet
      service:
        name: kubelet
        state: stopped

    - name: Remove containerd configuration file
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted

    # - name: Initialize the Kubernetes cluster using kubeadm command
    #   when: inventory_hostname in groups['k8s_master_sing_clus']

    #   command: kubeadm init --control-plane-endpoint="{{ ip_cpe }}:6443" --upload-certs --apiserver-advertise-address="{{ ip_aaa }}" --pod-network-cidr="{{ ip_pnc }}" --service-cidr="{{ ip_sc }}" --kubernetes-version="{{ k8s }}"

    # - name: Set up Kubernetes for $HOME user
    #   command: "{{ item }}"
    #   when: inventory_hostname in groups['k8s_master_sing_clus']
    #   with_items:
    #     - mkdir -p $HOME/.kube
    #     - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    #     - chown $USER:$USER $HOME/.kube/config

    # - name: Install Flannel pod network
    #   become: false
    #   when: inventory_hostname in groups['k8s_master_sing_clus']
    #   command: kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml

    # - name: Retrieve Kubernetes join command that is used to join worker node(s)
    #   become: false
    #   when: inventory_hostname in groups['k8s_master_sing_clus']
    #   command: kubeadm token create --print-join-command
    #   register: join_command

    # - name: Attach kubeadm join command to a file on Ansible control node
    #   when: inventory_hostname in groups['k8s_master_sing_clus']
    #   local_action: "copy content='{{ join_command.stdout_lines[0] }}' dest=join-command"

    # - name: Copy the join-command file created above to worker node
    #   when: inventory_hostname in groups['k8s_worker_sing_clus']
    #   copy: src=join-command dest=/tmp/kubeadm-join.sh mode=0777

    # - name: Join the worker node to cluster
    #   when: inventory_hostname in groups['k8s_worker_sing_clus']
    #   command: sh /tmp/kubeadm-join.sh
